#!/usr/bin/php
<?php

define('U2BE_CURRENT_DIR', getcwd());
define('U2BE_LIB_DIR', U2BE_CURRENT_DIR . '/lib');
define('U2BE_CACHE_DIR', U2BE_CURRENT_DIR . '/cache');
define('U2BE_ALBUMS_DIR', U2BE_CURRENT_DIR . '/albums');

/**
 * Class for u2be
 */
class U2be{
    var $artists = [];
    var $albums = [];

    function read(){
        $__artists = scandir( U2BE_LIB_DIR );
        array_shift( $__artists);
        array_shift( $__artists);

        $album_id = 1;
        foreach ($__artists as $artist_name){
            $__albums = scandir( U2BE_LIB_DIR . '/' . $artist_name );

            array_shift($__albums);
            array_shift($__albums);

            $artist = [
                "name" => $artist_name,
                "albums" => []
            ];
            
            foreach ($__albums as $album_file){
                $album = [
                    "id" => $album_id,
                    'file' => U2BE_LIB_DIR . '/' . $artist_name . '/' . $album_file,
                    'name' => str_replace('.json', '', $album_file),
                    'artist' => $artist_name
                ];

                $album['json'] = json_decode(file_get_contents($album['file']), true);
                $album['dir'] = U2BE_ALBUMS_DIR . '/' . $album['json']['artist'] . '/' . $album['json']['artist'] . ' ' . $album['json']['year'] . ' ' . $album['json']['album'];
                $album['dir_exists'] = is_dir($album['dir']);

                $this->albums[$album_id] = $album;
                $artist['albums'][] = $album;
                $album_id++;
            }
            $this->artists[] = $artist;            
        }

    }

    function showAlbums($filter = 'all'){
        echo "Avialable albums: \n";
        foreach ($this->albums as $album){
            switch ($filter) {
                case 'all':
                    # code...
                    break;
                case 'done': 
                    if (!$album['dir_exists']){
                        continue;
                    }
                    break;
                
                case 'not_done': 
                    if ($album['dir_exists']){
                        continue;
                    }
                    break;

                default:
                    # code...
                    break;
            }
            echo sprintf('%s. "%s" - "%s [%s]"',
                $album['id'],
                $album['artist'],
                $album['name'],
                $album['dir_exists'] ? 'OK' : 'NOT FIND ON DISK'
            ) . "\n";
        }
    }

    function albumExists($album_id){
        return !empty($this->albums[$album_id]);
    }

    function showAlbumInfo($album_id){
        if (empty($this->albums[$album_id])){
            echo "Album [$album_id] not found\n";
            return;
        }

        
        $album = json_decode( file_get_contents( $this->albums[ $album_id ]['file'] ), true);
        print_r($album);
    }

    function makePaths(){
        if (!is_dir(U2BE_CACHE_DIR))
            mkdir(U2BE_CACHE_DIR, 0777, true);
        
        if (!is_dir(U2BE_ALBUMS_DIR))
            mkdir(U2BE_ALBUMS_DIR, 0777, true);
    }

    function getAlbum($album_id){
        if ( !$this->albumExists($album_id) ){
            echo "Album [$album_id] not found\n";
            return;
        }
        $album = json_decode( file_get_contents( $this->albums[ $album_id ]['file'] ), true);
        if (empty($album['youtube'])){
            echo "Youtube URL not found";
            return;
        }
        $album['youtube_url'] = "https://www.youtube.com/watch?v=" . $album['youtube'];
        $album['cache_dir'] = U2BE_CACHE_DIR . '/' . $album['youtube'];
        $album['cache_data_json'] = U2BE_CACHE_DIR . '/' . $album['youtube'] . '/data.json';
        $album['dir'] = U2BE_ALBUMS_DIR . '/' . $album['artist'] . '/' . $album['artist'] . ' ' .$album['year'] . ' ' . $album['album'];

        if (!is_dir( $album['cache_dir'] )){
            mkdir( $album['cache_dir'], 0777, true );
        }
        $this->makePaths();
        if (!is_dir( $album['dir'] )){
            mkdir( $album['dir'], 0777, true );
        }

        
        $album['cmd'] = sprintf(
            "cd " . $album['cache_dir'] . '; youtube-dl %s -j', //-x --get-filename --get-thumbnail --skip-download --write-info-json  --write-annotations --write-description',
            $album['youtube_url']

        );

        if (!file_exists($album['cache_data_json'])){
            echo "Download video information...\n";
            exec($album['cmd'], $result);
            if (empty( $result[0] )){
                echo "not a json!!";
                return;
            }
            file_put_contents($album['cache_data_json'],  $result[0] );
        }
        //extract json
        
        $json = json_decode( file_get_contents($album['cache_data_json']), true);
        $album['_filename'] = $json['_filename'];
        $album['thumbnail'] = $json['thumbnail'];
        $album['title'] = $json['title'];
        

        exec("youtube-dl  -x --get-filename  " . $album['youtube_url'], $__tmp1);

        $album['cache_opus'] = $album['cache_dir'] . '/' . $__tmp1[0];

        //Check on NON *.opus audio file
        if (!file_exists( $album['cache_opus'] )){
            $album['cache_opus'] = $album['cache_dir'] . '/' . $album['title'] . '-' . $album['youtube'] . '.opus';
        }

        $album['duration'] = $json['duration'];

        if (isset($album['chapters']) && !is_array($album['chapters'])){
            $album['chapters'] = false;
        }
        
        $album['chapters'] = 
            empty($album['chapters'])
            ? $json['chapters']
            : $album['chapters'];

            if (empty($album['chapters'])){
                echo "Tracklist/chapters is empty of json options file! " . $this->albums[ $album_id ]['file'];
                return;
            }
        /**
         * ffmpeg \
         *      -i $src_file
         *      -ss $START_SECONDS
         *      -t  $TIME_LENGTH
         *      -q:a 0 //variable bitrate
         */

        
        if (!file_exists($album['cache_opus'])){
            echo "Download video... {$album['_filename']}";
            exec("cd " . $album['cache_dir'] . "; youtube-dl --write-thumbnail -w -x " . $album['youtube_url']);
        }

        if (!file_exists($album['cache_opus'])){
            echo "Audio track [" . $album['cache_opus'] . "] is not find!\n";
            return;
        }

        //cover
        $album['cache_cover'] = 
             $album['cache_dir'] . '/' . $album['title'] . '-' . $album['youtube'] . '.jpg';

        if (file_exists($album['cache_cover'])){
            copy( $album['cache_cover'], $album['dir'] . '/cover.jpg' );
        }
        
        //chapters
        if ($album['chapters']){
            $i = 0;
            //$chapters = count($album['chapters']);
            echo "Extract tracks: {$album['artist']}/{$album['album']} \n";
            echo "Artist: {$album['artist']} \n";
            echo "Album: {$album['album']} \n";
            echo "Tracks count: " . count($album['chapters']) . " \n";

            //write readme
            file_put_contents($album['dir'] . '/README.txt', join("\n", [
                    $album['youtube_url'],
                    '',
                    $json['description'],
                ]));

            foreach ($album['chapters'] as $chapter){
                $mp3_file = $album['dir'] . '/' . $chapter['title'] . '.mp3';

                $length = $chapter['end_time'] - $chapter['start_time'];
                $album['chapters'][$i]['length'] = $length;
                $album['chapters'][$i]['mp3'] = $mp3_file;

                if (file_exists($mp3_file) && 2 == 4){
                    continue;
                }

                echo "\n\"{$chapter['title']}\" (track " . ($i+1) . ' of ' . count($album['chapters']) . ')';
                //               1       2     3    4
                exec(sprintf('ffmpeg  -loglevel panic  -y -i "%s" -ss %s -t %s -q:a 0 "%s"', 
                    $album['cache_opus'],
                    $chapter['start_time'],
                    $length,
                    $mp3_file)
                );

                //id3tag
                exec(sprintf(
                    'id3v2 -A "%s" -a "%s" -y "%s" -t "%s" -c "%s" -T %s "%s"',
                    $album['album'],
                    $album['artist'],
                    $album['year'],
                    $this->extractTitle($chapter['title']),
                    str_replace('https://', '', $album['youtube_url']),
                    $i+1,
                    $mp3_file
                ));

                
                $i++;
            }
        }
        $album['description'] = $json['description'];
        
        //print_r(compact('album'));
        
        echo "\n";        
    }

    /**
     * Remove lead number of track
     *
     * @param [type] $title
     * @return void
     */
    function extractTitle($title){
        for($i = 1; $i < 30; $i++){
            
            if (strpos($title, "0$i. ") !== false){
                return str_replace("0$i. ", '', $title);
            }
            
            if (strpos($title, "0$i- ") !== false){
                return str_replace("0$i- ", '', $title);
            }            

            if (strpos($title, "$i. ") !== false){
                return str_replace("$i. ", '', $title);
            }
        }
    }

    function main($argv){
        $command1 = empty( $argv[1] ) ? null : $argv[1];
        $command2 = empty( $argv[2] ) ? null : $argv[2];
        $command3 = empty( $argv[3] ) ? null : $argv[3];

        $this->read();

        switch ($command1) {
            case 'debug': 
                print_r($this->albums);
                break;
            case 'show':
                switch ($command2) {
                    case 'album':
                        if ($command3){
                            $this->showAlbumInfo($command3);
                        } else {
                            $this->showAlbums();
                        }
                        break;
                    case 'done': 
                        $this->showAlbums('done');
                        break;

                    case 'not_done': 
                    case 'not': 
                        $this->showAlbums('not_done');
                        break;
                    
                    default:
                        $this->showAlbums();
                        break;
                }
                break;
            case 'get':
                if ($command2){
                    if ($command2 === 'all'){
                        for($i=0; $i<count($this->albums); $i++){
                            $this->getAlbum($i+1);    
                        }
                    } else {
                        $this->getAlbum($command2);
                    }
                    
                } else {
                    $this->showAlbums();
                }
                break;
            default:
                # code...
                $this->showAlbums();
                break;
        }
    }

    function test(){
        print_r(  );
    }
}

$u2be = new U2be();
$u2be->main($argv);

//$u2be->read();
//print_r( $u2be->albums );